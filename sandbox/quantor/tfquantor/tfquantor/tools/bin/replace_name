#!/usr/bin/env python
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import tensorflow as tf

def display_nodes(nodes):
    for i, node in enumerate(nodes):
        print('{} {} {}'.format(i, node.name, node.op))
        for j, n in enumerate(node.input):
            print('  = {} {}'.format(i, n))

def main():
    parser = argparse.ArgumentParser(description='replace all OPs in name scope "SCOPE" with a single custom OP')
    parser.add_argument('--scope', help='Scope name to be replaced')
    parser.add_argument('--frozen_pb', help='Frozen graph file (.pb)')
    parser.add_argument('--output_pb', help='Output graph file after replacement')
    args = parser.parse_args()
    prefix = 'FQ/'

    with tf.gfile.GFile(args.frozen_pb, "rb") as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())

        nodes = graph_def.node
        scope_nodes = filter(lambda n : n.name.startswith(args.scope), nodes)
        scope_fakequant_nodes = [n for n in scope_nodes if n.op == 'FakeQuantWithMinMaxVars']
        scope_fakequant_node_names = [n.name for n in scope_fakequant_nodes]
        for n in scope_fakequant_nodes:
            n.name = prefix + n.name
            
        print('modified node names : ' + str(scope_fakequant_node_names))
        for n in nodes:
            for idx, i in enumerate(n.input):
                if i in scope_fakequant_node_names:
                    n.input[idx] = prefix + n.input[idx]
                    print('input name modified to ' + n.input[idx])

        with tf.gfile.GFile(args.output_pb, "wb") as f:
            f.write(graph_def.SerializeToString())

if __name__ == '__main__':
    main()
